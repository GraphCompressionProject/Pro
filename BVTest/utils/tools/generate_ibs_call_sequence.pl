#!/usr/bin/perl -w

# generates a program for IBS that checks that it's reading the same thing the OBS wrote
# (using the OBS test program generator).

my $java_preamble = <<DONE;
import it.unimi.dsi.mg4j.io.*;
import java.io.*;

/**
 * Test harness for output bitstream
 */
public class InputBitstreamTest {
    public static void main( String[] args ) throws Exception {
//        PrintStream ps = new PrintStream( new BufferedOutputStream( new FileOutputStream( "java_obs_log" )));

//        byte[] dat = new byte[800];

//        DebugOutputBitStream obs = new DebugOutputBitStream( new OutputBitStream( dat ), ps );
        InputBitStream ibs = new InputBitStream( args[1] );

        // Call a bunch of methods.
DONE


my $java_postamble = <<DONE;
    }
}
DONE

my $cpp_preamble = <<DONE;
#include "../input_bitstream.hpp"
#include <cassert>
#include <iostream>
#include <vector>
#include <boost/shared_ptr.hpp>

using namespace std;

/**
 * Test harness for input bitstream
 */
int main( int argc, char** argv ) {
    if( argc < 2 ) {
        cerr << "usage: " << argv[0] << " <input-file>\\n"
             << "where input file was generated by the obs test harness with identical log.\\n";
    }

    webgraph::ibitstream ibs( argv[1] );

   // Call a bunch of methods.
DONE

my $cpp_postamble = <<DONE;
    return 0;
}

DONE

################################################################################

my %java_tbl = (
    'preamble' => sub { return $java_preamble; },
    'postamble' => sub { return $java_postamble; },
    'z' => sub { my ($a, $p) = @_; return "        assert $a == ibs.readZeta( $p );"; },
    'g' => sub { my ($a, $p) = @_; return "        assert $a == ibs.readGamma();"; },
    'U' => sub { my ($a, $p) = @_; return "        assert $a == ibs.readUnary();"; },
#    'log' => sub { return "logArray( dat, out );"; }
    );


my %cpp_tbl = (
    'preamble' => sub { return $cpp_preamble; },
    'postamble' => sub { return $cpp_postamble; },
    'z' => sub { my ($a, $p) = @_; 
                 return "assert( $a == ibs.read_zeta( $p ) );"; },
    'g' => sub { my ($a, $p) = @_; 
                 return "assert( $a == ibs.read_gamma() );"; },
    'U' => sub { my ($a, $p) = @_; 
                 return "assert( $a == ibs.read_unary() );"; },
    'log' => sub { return "log_array( *dat, log );"; }
    );

my ($infile_name, $outfile_name)  = @ARGV;

die if not defined $infile_name or not defined $outfile_name;

open my $infile, $infile_name or die;

my $tbl;

if( $outfile_name =~ /cpp/i ) {
    $tbl = \%cpp_tbl;
} elsif( $outfile_name =~ /java/i ) {
    $tbl = \%java_tbl;
} else {
    die "invalid translation";
}

open my $outfile, ">$outfile_name" or die;

print $outfile $tbl->{'preamble'}->();

while( my $nextline = <$infile> ) {
    next if $nextline !~ /\{(.)(.*):(.*)\}/;

    my ($op, $param, $arg) = ($1, $2, $3);

    print $outfile $tbl->{$op}->( $arg, $param ), "\n";
#    print $tbl->{'log'}->(), "\n";
}

print $outfile $tbl->{'postamble'}->();

close $infile;
close $outfile;

